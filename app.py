import streamlit as st
import pandas as pd
import numpy as np
import requests
import pickle
import tensorflow as tf
from tensorflow.keras.models import load_model
from datetime import datetime
import pytz # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from sklearn.preprocessing import OneHotEncoder # –Ø–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º OneHotEncoder


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ —Å app.py
MODEL_PATH = 'weather_clothing_model.h5'
OHE_PATH = 'ohe_categories.pkl' 
SCALER_PATH = 'scaler.pkl'
CLOTHING_MAPPING_PATH = 'clothing_mapping.pkl'
CLOTHING_GROUPS_PATH = 'clothing_groups.pkl' 

# –¢–í–û–ô API –ö–õ–Æ–ß OPENWEATHERMAP! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò –ü–õ–ï–ô–°–•–û–õ–î–ï–†!
OPENWEATHER_API_KEY = "c80a654b9866303179325d953f8d0c79"
OPENWEATHER_API_URL = "http://api.openweathermap.org/data/2.5/weather"

# –¢–í–û–Ø –ü–ê–†–¢–ù–ï–†–°–ö–ê–Ø –°–°–´–õ–ö–ê SELA! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò –ü–õ–ï–ô–°–•–û–õ–î–ï–†!
SELA_AFFILIATE_LINK = "https://kpwfp.com/g/2d356747430c2ebe1cc726a738318c/?erid=5jtCeReLm1S3Xx3LfVkzjYr"

@st.cache_resource
def load_all_resources():
    try:
        model = load_model(MODEL_PATH)
        with open(OHE_PATH, 'rb') as f:
            ohe = pickle.load(f) 
            
        with open(SCALER_PATH, 'rb')as f:
            scaler = pickle.load(f) 
            
            # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ñ–ï–°–¢–ö–û –ó–ê–î–ê–ï–ú –ò–ú–ï–ù–ê –ü–†–ò–ó–ù–ê–ö–û–í –î–õ–Ø SCALER ---
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ scaler –±—ã–ª –æ–±—É—á–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ–ª–æ–Ω–æ–∫.
            numerical_cols_for_scaler = ['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', '–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)', '–í–µ—Ç–µ—Ä (–º/—Å)']

        with open(CLOTHING_MAPPING_PATH, 'rb') as f:
            clothing_mapping = pickle.load(f) 
            if isinstance(clothing_mapping, pd.DataFrame):
                clothing_mapping_series = pd.Series(clothing_mapping['clothing_item'].values, index=clothing_mapping.index)
                clothing_mapping = clothing_mapping_series
            
        with open(CLOTHING_GROUPS_PATH, 'rb') as f:
            clothing_groups = pickle.load(f) 

        # --- –°–æ–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ ---
        # –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–∞–∫ –æ–Ω–∏ –ë–´–õ–ò –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è –¥–ª—è OHE (—Ä—É—Å.)
        categorical_cols_for_ohe = ['–û—Å–∞–¥–∫–∏', '–û–±–ª–∞—á–Ω–æ—Å—Ç—å', '–í—Ä–µ–º—è —Å—É—Ç–æ–∫']
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è OHE-–∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ OHE
        ohe_feature_names = ohe.get_feature_names_out(categorical_cols_for_ohe)
        
        # –ü–æ–ª–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–æ–¥–µ–ª—å—é
        input_features_order = numerical_cols_for_scaler + list(ohe_feature_names)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –º–æ–¥–µ–ª—å—é (20)
        if len(input_features_order) != 20:
             st.warning(f"–í–ù–ò–ú–ê–ù–ò–ï: –û–∂–∏–¥–∞–ª–æ—Å—å 20 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –≤—Ö–æ–¥–µ –º–æ–¥–µ–ª–∏, –Ω–æ —Å–æ–±—Ä–∞–Ω–æ {len(input_features_order)}. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ process_data.py, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ OHE.")
             
        return model, ohe, scaler, clothing_mapping, clothing_groups, input_features_order, numerical_cols_for_scaler
    except FileNotFoundError as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'process_data.py' –∏ 'define_clothing_groups.py' –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã.")
        st.stop()
    except Exception as e:
        st.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        st.stop()

model, ohe, scaler, clothing_mapping, clothing_groups, input_features_order, numerical_cols_for_scaler = load_all_resources()
st.success("–í—Å–µ –º–æ–¥–µ–ª–∏ –∏ –º–∞–ø–ø–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –º–∞–ø–ø–∏–Ω–≥–∞ ---

# –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è map_precipitation
def map_precipitation(description):
    desc = description.lower()
    if '–¥–æ–∂–¥—å' in desc or '–ª–∏–≤–µ–Ω—å' in desc or '–º–æ—Ä–æ—Å—å' in desc or '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å' in desc or '—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å' in desc:
        return '–¥–æ–∂–¥—å' 
    elif '—Å–Ω–µ–≥' in desc or '–ª–µ–≥–∫–∏–π —Å–Ω–µ–≥' in desc:
        return '—Å–Ω–µ–≥' 
    elif '—Ç—É–º–∞–Ω' in desc or '–¥—ã–º–∫–∞' in desc:
        return '—Ç—É–º–∞–Ω' 
    elif '–≥—Ä–æ–∑–∞' in desc: 
        return '–≥—Ä–æ–∑–∞' 
    return '—è—Å–Ω–æ' 

# –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è map_cloudiness
def map_cloudiness(percentage):
    if percentage <= 10:
        return '—è—Å–Ω–æ'  
    elif percentage <= 40:
        return '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å'  
    elif percentage <= 70:
        return '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å'  
    else:
        return '–ø–∞—Å–º—É—Ä–Ω–æ'  

# –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è map_time_of_day
def map_time_of_day(hour):
    if 5 <= hour < 12:
        return '—É—Ç—Ä–æ'  
    elif 12 <= hour < 18:
        return '–¥–µ–Ω—å'  
    elif 18 <= hour < 23:
        return '–≤–µ—á–µ—Ä'  
    else:
        return '–Ω–æ—á—å'  

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ —Ç–µ–∫—Å—Ç–æ–º (–¥–ª—è st.info)
def map_time_of_day_to_text(encoded_string): 
    return encoded_string.capitalize()


def predict_clothing_for_app(temp, humidity, wind, precipitation_cat, cloudiness_cat, time_of_day_cat):
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ scaler —Å –ñ–ï–°–¢–ö–û –ó–ê–î–ê–ù–ù–´–ú–ò –†–£–°–°–ö–ò–ú–ò –ò–ú–ï–ù–ê–ú–ò –ö–û–õ–û–ù–û–ö
    numerical_input_for_scaler_df = pd.DataFrame([[temp, humidity, wind]],
                              columns=numerical_cols_for_scaler) # <<< –ò–°–ü–û–õ–¨–ó–£–ï–ú numerical_cols_for_scaler

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    input_data_scaled = scaler.transform(numerical_input_for_scaler_df)
    input_data_scaled_df = pd.DataFrame(input_data_scaled, columns=numerical_cols_for_scaler)

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ OHE (—Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏)
    categorical_input_for_ohe = pd.DataFrame([[precipitation_cat, cloudiness_cat, time_of_day_cat]],
                              columns=['–û—Å–∞–¥–∫–∏', '–û–±–ª–∞—á–Ω–æ—Å—Ç—å', '–í—Ä–µ–º—è —Å—É—Ç–æ–∫'])

    # One-Hot Encoding –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    input_ohe = ohe.transform(categorical_input_for_ohe)
    ohe_feature_names = ohe.get_feature_names_out(categorical_input_for_ohe.columns)
    input_ohe_df = pd.DataFrame(input_ohe.toarray(), columns=ohe_feature_names)

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    final_input_df = pd.concat([input_data_scaled_df, input_ohe_df], axis=1)
    
    # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–±—É—á–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å
    final_input_df = final_input_df[input_features_order]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å Keras
    input_for_prediction = final_input_df.values

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predictions = model.predict(input_for_prediction)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π –æ–¥–µ–∂–¥—ã
    if predictions.ndim > 1:
        predictions = predictions[0]

    recommended_items = []
    threshold = 0.2 # –ü–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –º—É–ª—å—Ç–∏-–ª–µ–π–±–ª –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.
    
    for i, prob in enumerate(predictions):
        if prob > threshold:
            if i < len(clothing_mapping): 
                recommended_items.append(clothing_mapping[i])
            else:
                st.warning(f"–ò–Ω–¥–µ–∫—Å {i} –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ clothing_mapping.")
        
        if len(recommended_items) >= 7: 
            break

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ-—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    if not recommended_items:
        if temp >= 25:
            return ["—Ñ—É—Ç–±–æ–ª–∫–∞", "—à–æ—Ä—Ç—ã", "—Å–∞–Ω–¥–∞–ª–∏–∏", "–∫–µ–ø–∫–∞"]
        elif 15 <= temp < 25:
            return ["–∫–æ—Ñ—Ç–∞", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–¥–∂–∏–Ω—Å—ã", "–ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞"]
        elif 0 <= temp < 15:
            return ["—Å–≤–∏—Ç–µ—Ä", "–∫—É—Ä—Ç–∫–∞", "–±–æ—Ç–∏–Ω–∫–∏", "—à–∞–ø–∫–∞"]
        elif temp < 0:
            return ["–∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞", "—à–∞–ø–∫–∞", "—à–∞—Ä—Ñ", "–ø–µ—Ä—á–∞—Ç–∫–∏", "–∑–∏–º–Ω–∏–µ –±–æ—Ç–∏–Ω–∫–∏", "–ø–∞–ª—å—Ç–æ"]
        return ["–æ–¥–µ–∂–¥–∞ –ø–æ —Å–µ–∑–æ–Ω—É"] 
    
    return recommended_items # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫

# --- UI —á–∞—Å—Ç—å Streamlit ---
st.title("üëï WeatherApp_AI")
st.header("–ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥—ã.")

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
city_options = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–æ—á–∏", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ü–µ—Ä–º—å", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–í–æ—Ä–æ–Ω–µ–∂", "–î—Ä—É–≥–æ–µ"]
selected_city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", city_options)

if selected_city == "–î—Ä—É–≥–æ–µ":
    custom_city = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    if custom_city:
        selected_city = custom_city

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ"):
    if not selected_city or selected_city == "–î—Ä—É–≥–æ–µ":
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
    else:
        with st.spinner(f"–ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è {selected_city} –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
            try:
                # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å OpenWeatherMap
                params = {
                    'q': selected_city,
                    'appid': OPENWEATHER_API_KEY,
                    'units': 'metric',
                    'lang': 'ru'
                }
                response = requests.get(OPENWEATHER_API_URL, params=params)
                response.raise_for_status() 
                weather_data = response.json()

                temp = weather_data['main']['temp']
                humidity = weather_data['main'].get('humidity', 0)
                wind = weather_data['wind'].get('speed', 0)
                
                precipitation_text = weather_data['weather'][0]['description'] if weather_data.get('weather') and weather_data['weather'] else '—è—Å–Ω–æ'
                cloudiness_percent = weather_data['clouds']['all'] if 'clouds' in weather_data else 0
                
                # –í—Ä–µ–º—è —Å—É—Ç–æ–∫ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≥–æ—Ä–æ–¥–∞
                timezone_offset_seconds = weather_data.get('timezone', 0) 
                city_timezone = pytz.FixedOffset(timezone_offset_seconds / 60) 
                
                utc_now = datetime.utcnow().replace(tzinfo=pytz.utc)
                city_time = utc_now.astimezone(city_timezone)
                current_hour = city_time.hour

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö/—á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–ª—è OHE
                precipitation_cat = map_precipitation(precipitation_text)
                cloudiness_cat = map_cloudiness(cloudiness_percent)
                time_of_day_cat = map_time_of_day(current_hour)
                
                # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                recommended_clothing = predict_clothing_for_app(
                    temp, humidity, wind, 
                    precipitation_cat, 
                    cloudiness_cat, 
                    time_of_day_cat
                )

                st.subheader("–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ:")

                # –í—ã–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–¥–µ–∂–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è –±–ª–æ–∫–µ
                for item in recommended_clothing:
                    with st.expander(f"**{item.capitalize()}**"):
                        st.write(f"_–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {item.capitalize()} –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ._")
                        st.markdown(f"**[–ü–æ–∏—Å–∫ {item.capitalize()} –Ω–∞ Sela]({SELA_AFFILIATE_LINK})**", unsafe_allow_html=True)

                # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –æ–±—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Sela
                st.markdown(f"---")
                st.write("–ò—â–µ—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤?")
                st.markdown(f"**[–ü–æ—Å–µ—Ç–∏—Ç–µ –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ Sela]({SELA_AFFILIATE_LINK})**", unsafe_allow_html=True)
                st.markdown(f"---")

                # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                st.info(f"–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {selected_city}: {temp}¬∞C, {humidity}% –≤–ª–∞–∂–Ω–æ—Å—Ç—å, {wind} –º/—Å –≤–µ—Ç–µ—Ä, {precipitation_cat.capitalize()} –æ—Å–∞–¥–∫–∏, {cloudiness_percent}% –æ–±–ª–∞—á–Ω–æ—Å—Ç—å, {map_time_of_day_to_text(time_of_day_cat)}.")

            except requests.exceptions.HTTPError as http_err:
                st.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {http_err}. –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                st.warning("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ API-–∫–ª—é—á OpenWeatherMap –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
            except requests.exceptions.ConnectionError as conn_err:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {conn_err}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            except requests.exceptions.Timeout as timeout_err:
                st.error(f"–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {timeout_err}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except requests.exceptions.RequestException as req_err:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenWeatherMap API: {req_err}")
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")

st.markdown("---")
st.write("–ü—Ä–æ–µ–∫—Ç: WeatherApp_AI")
st.write("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –°—ç–º (–ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ AI)")
